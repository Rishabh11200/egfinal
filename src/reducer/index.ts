import AsyncStorage from '@react-native-async-storage/async-storage';
import {createSlice, PayloadAction} from '@reduxjs/toolkit';
import persistReducer from 'redux-persist/es/persistReducer';
import {RootState} from '../store';

export type customUser = {
  phoneNumber: string;
  uid: string;
};

export interface UserState {
  isLoggedIn: boolean;
  user: customUser | null;
}
const persistConfig = {
  key: 'root',
  storage: AsyncStorage,
};

const initialState: UserState = {
  user: null,
  isLoggedIn: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   },
// );

export const userSlice = createSlice({
  name: 'userData',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    loggingIn: (state, action: PayloadAction<UserState>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.user = action.payload.user;
      state.isLoggedIn = action.payload.isLoggedIn;
    },
    logout: state => {
      state.user = null;
      state.isLoggedIn = false;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  //   extraReducers: builder => {
  //     builder
  //       .addCase(incrementAsync.pending, state => {
  //         state.status = 'loading';
  //       })
  //       .addCase(incrementAsync.fulfilled, (state, action) => {
  //         state.status = 'idle';
  //         state.value += action.payload;
  //       })
  //       .addCase(incrementAsync.rejected, state => {
  //         state.status = 'failed';
  //       });
  //   },
});
export const {loggingIn, logout} = userSlice.actions;
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const isLoggedIn = (state: RootState) => state.userData.isLoggedIn;
export const userObject = (state: RootState) => state.userData.user;
const userPersisterReducer = persistReducer(
  persistConfig,
  userSlice.reducer,
) as typeof userSlice.reducer;
export default userPersisterReducer;
